// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: final.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef final_2eproto_2epb_2eh
#define final_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_final_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_final_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_final_2eproto;
}  // extern "C"
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Person_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Person final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Person* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Person));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Person(
      ::google::protobuf::internal::ConstantInitialized);

  inline Person(const Person& from) : Person(nullptr, from) {}
  inline Person(Person&& from) noexcept
      : Person(nullptr, std::move(from)) {}
  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *reinterpret_cast<const Person*>(
        &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Person& a, Person& b) { a.Swap(&b); }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Person>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Person& from) { Person::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Person* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Person"; }

 protected:
  explicit Person(::google::protobuf::Arena* arena);
  Person(::google::protobuf::Arena* arena, const Person& from);
  Person(::google::protobuf::Arena* arena, Person&& from) noexcept
      : Person(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kEFieldNumber = 5,
    kFFieldNumber = 6,
    kGFieldNumber = 7,
    kHFieldNumber = 8,
    kIFieldNumber = 9,
    kJFieldNumber = 10,
    kKFieldNumber = 11,
  };
  // string A = 1;
  void clear_a() ;
  const std::string& a() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_a(Arg_&& arg, Args_... args);
  std::string* mutable_a();
  [[nodiscard]] std::string* release_a();
  void set_allocated_a(std::string* value);

  private:
  const std::string& _internal_a() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();

  public:
  // string B = 2;
  void clear_b() ;
  const std::string& b() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_b(Arg_&& arg, Args_... args);
  std::string* mutable_b();
  [[nodiscard]] std::string* release_b();
  void set_allocated_b(std::string* value);

  private:
  const std::string& _internal_b() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();

  public:
  // string C = 3;
  void clear_c() ;
  const std::string& c() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_c(Arg_&& arg, Args_... args);
  std::string* mutable_c();
  [[nodiscard]] std::string* release_c();
  void set_allocated_c(std::string* value);

  private:
  const std::string& _internal_c() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_c(const std::string& value);
  std::string* _internal_mutable_c();

  public:
  // string D = 4;
  void clear_d() ;
  const std::string& d() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_d(Arg_&& arg, Args_... args);
  std::string* mutable_d();
  [[nodiscard]] std::string* release_d();
  void set_allocated_d(std::string* value);

  private:
  const std::string& _internal_d() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();

  public:
  // string E = 5;
  void clear_e() ;
  const std::string& e() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_e(Arg_&& arg, Args_... args);
  std::string* mutable_e();
  [[nodiscard]] std::string* release_e();
  void set_allocated_e(std::string* value);

  private:
  const std::string& _internal_e() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();

  public:
  // string F = 6;
  void clear_f() ;
  const std::string& f() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f(Arg_&& arg, Args_... args);
  std::string* mutable_f();
  [[nodiscard]] std::string* release_f();
  void set_allocated_f(std::string* value);

  private:
  const std::string& _internal_f() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_f(const std::string& value);
  std::string* _internal_mutable_f();

  public:
  // string G = 7;
  void clear_g() ;
  const std::string& g() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_g(Arg_&& arg, Args_... args);
  std::string* mutable_g();
  [[nodiscard]] std::string* release_g();
  void set_allocated_g(std::string* value);

  private:
  const std::string& _internal_g() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();

  public:
  // string H = 8;
  void clear_h() ;
  const std::string& h() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h(Arg_&& arg, Args_... args);
  std::string* mutable_h();
  [[nodiscard]] std::string* release_h();
  void set_allocated_h(std::string* value);

  private:
  const std::string& _internal_h() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_h(const std::string& value);
  std::string* _internal_mutable_h();

  public:
  // string I = 9;
  void clear_i() ;
  const std::string& i() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_i(Arg_&& arg, Args_... args);
  std::string* mutable_i();
  [[nodiscard]] std::string* release_i();
  void set_allocated_i(std::string* value);

  private:
  const std::string& _internal_i() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_i(const std::string& value);
  std::string* _internal_mutable_i();

  public:
  // string J = 10;
  void clear_j() ;
  const std::string& j() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_j(Arg_&& arg, Args_... args);
  std::string* mutable_j();
  [[nodiscard]] std::string* release_j();
  void set_allocated_j(std::string* value);

  private:
  const std::string& _internal_j() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_j(const std::string& value);
  std::string* _internal_mutable_j();

  public:
  // string K = 11;
  void clear_k() ;
  const std::string& k() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_k(Arg_&& arg, Args_... args);
  std::string* mutable_k();
  [[nodiscard]] std::string* release_k();
  void set_allocated_k(std::string* value);

  private:
  const std::string& _internal_k() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();

  public:
  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Person& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr a_;
    ::google::protobuf::internal::ArenaStringPtr b_;
    ::google::protobuf::internal::ArenaStringPtr c_;
    ::google::protobuf::internal::ArenaStringPtr d_;
    ::google::protobuf::internal::ArenaStringPtr e_;
    ::google::protobuf::internal::ArenaStringPtr f_;
    ::google::protobuf::internal::ArenaStringPtr g_;
    ::google::protobuf::internal::ArenaStringPtr h_;
    ::google::protobuf::internal::ArenaStringPtr i_;
    ::google::protobuf::internal::ArenaStringPtr j_;
    ::google::protobuf::internal::ArenaStringPtr k_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_final_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Person_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Person

// string A = 1;
inline void Person::clear_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::a() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.A)
  return _internal_a();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_a(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.a_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.A)
}
inline std::string* Person::mutable_a() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Person.A)
  return _s;
}
inline const std::string& Person::_internal_a() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a_.Get();
}
inline void Person::_internal_set_a(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.a_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.a_.Mutable( GetArena());
}
inline std::string* Person::release_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.A)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.a_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.a_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_a(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.a_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.A)
}

// string B = 2;
inline void Person::clear_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.b_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::b() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.B)
  return _internal_b();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_b(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.b_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.B)
}
inline std::string* Person::mutable_b() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:Person.B)
  return _s;
}
inline const std::string& Person::_internal_b() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.b_.Get();
}
inline void Person::_internal_set_b(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.b_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.b_.Mutable( GetArena());
}
inline std::string* Person::release_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.B)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.b_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.b_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_b(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.b_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.b_.IsDefault()) {
    _impl_.b_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.B)
}

// string C = 3;
inline void Person::clear_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.c_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Person::c() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.C)
  return _internal_c();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_c(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.c_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.C)
}
inline std::string* Person::mutable_c() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_c();
  // @@protoc_insertion_point(field_mutable:Person.C)
  return _s;
}
inline const std::string& Person::_internal_c() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.c_.Get();
}
inline void Person::_internal_set_c(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.c_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.c_.Mutable( GetArena());
}
inline std::string* Person::release_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.C)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.c_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.c_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_c(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.c_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.c_.IsDefault()) {
    _impl_.c_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.C)
}

// string D = 4;
inline void Person::clear_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Person::d() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.D)
  return _internal_d();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_d(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.d_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.D)
}
inline std::string* Person::mutable_d() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_d();
  // @@protoc_insertion_point(field_mutable:Person.D)
  return _s;
}
inline const std::string& Person::_internal_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.d_.Get();
}
inline void Person::_internal_set_d(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.d_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.d_.Mutable( GetArena());
}
inline std::string* Person::release_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.D)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.d_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.d_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_d(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.d_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.d_.IsDefault()) {
    _impl_.d_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.D)
}

// string E = 5;
inline void Person::clear_e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Person::e() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.E)
  return _internal_e();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_e(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.e_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.E)
}
inline std::string* Person::mutable_e() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:Person.E)
  return _s;
}
inline const std::string& Person::_internal_e() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.e_.Get();
}
inline void Person::_internal_set_e(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.e_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.e_.Mutable( GetArena());
}
inline std::string* Person::release_e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.E)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.e_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.e_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_e(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.e_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.e_.IsDefault()) {
    _impl_.e_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.E)
}

// string F = 6;
inline void Person::clear_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Person::f() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.F)
  return _internal_f();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_f(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.F)
}
inline std::string* Person::mutable_f() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:Person.F)
  return _s;
}
inline const std::string& Person::_internal_f() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_.Get();
}
inline void Person::_internal_set_f(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_.Mutable( GetArena());
}
inline std::string* Person::release_f() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.F)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.f_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_f(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.f_.IsDefault()) {
    _impl_.f_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.F)
}

// string G = 7;
inline void Person::clear_g() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.g_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Person::g() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.G)
  return _internal_g();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_g(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.g_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.G)
}
inline std::string* Person::mutable_g() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_g();
  // @@protoc_insertion_point(field_mutable:Person.G)
  return _s;
}
inline const std::string& Person::_internal_g() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.g_.Get();
}
inline void Person::_internal_set_g(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.g_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_g() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.g_.Mutable( GetArena());
}
inline std::string* Person::release_g() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.G)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.g_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.g_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_g(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.g_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.g_.IsDefault()) {
    _impl_.g_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.G)
}

// string H = 8;
inline void Person::clear_h() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.h_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Person::h() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.H)
  return _internal_h();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_h(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.h_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.H)
}
inline std::string* Person::mutable_h() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_h();
  // @@protoc_insertion_point(field_mutable:Person.H)
  return _s;
}
inline const std::string& Person::_internal_h() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.h_.Get();
}
inline void Person::_internal_set_h(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.h_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_h() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.h_.Mutable( GetArena());
}
inline std::string* Person::release_h() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.H)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.h_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.h_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_h(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.h_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.h_.IsDefault()) {
    _impl_.h_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.H)
}

// string I = 9;
inline void Person::clear_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.i_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Person::i() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.I)
  return _internal_i();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_i(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.i_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.I)
}
inline std::string* Person::mutable_i() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_i();
  // @@protoc_insertion_point(field_mutable:Person.I)
  return _s;
}
inline const std::string& Person::_internal_i() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.i_.Get();
}
inline void Person::_internal_set_i(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.i_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.i_.Mutable( GetArena());
}
inline std::string* Person::release_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.I)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.i_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.i_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_i(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.i_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.i_.IsDefault()) {
    _impl_.i_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.I)
}

// string J = 10;
inline void Person::clear_j() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.j_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Person::j() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.J)
  return _internal_j();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_j(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.j_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.J)
}
inline std::string* Person::mutable_j() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_j();
  // @@protoc_insertion_point(field_mutable:Person.J)
  return _s;
}
inline const std::string& Person::_internal_j() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.j_.Get();
}
inline void Person::_internal_set_j(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.j_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_j() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.j_.Mutable( GetArena());
}
inline std::string* Person::release_j() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.J)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.j_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.j_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_j(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.j_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.j_.IsDefault()) {
    _impl_.j_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.J)
}

// string K = 11;
inline void Person::clear_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Person::k() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Person.K)
  return _internal_k();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Person::set_k(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.k_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Person.K)
}
inline std::string* Person::mutable_k() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_k();
  // @@protoc_insertion_point(field_mutable:Person.K)
  return _s;
}
inline const std::string& Person::_internal_k() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.k_.Get();
}
inline void Person::_internal_set_k(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.k_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.k_.Mutable( GetArena());
}
inline std::string* Person::release_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Person.K)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.k_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.k_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_k(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.k_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.k_.IsDefault()) {
    _impl_.k_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Person.K)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // final_2eproto_2epb_2eh
